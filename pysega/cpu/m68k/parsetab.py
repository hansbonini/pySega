
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programPLUS MINUS DIVISION LPARENTESIS RPARENTESIS LARROW RARROW ID INSTRUCTION SIZE REGISTER BINARY DECIMAL OCTAL HEXADECIMAL STRING OFFSETprogram : empty\n                    | statement\n                    | program statementstatement : operation operation : instruction\n                    | instruction addressing_mode\n                    | instruction extent\n                    | instruction extent addressing_modeempty : instruction : INSTRUCTION extent : SIZEaddressing_mode : direct_address\n                            | memory_addressdirect_address : registerdirect_address : register registermemory_address : memory_address_simpleindirect\n                            | memory_address_predecrement\n                            | memory_address_postincrement\n                            | memory_address_displacementindirect\n                            | memory_address_indexindirectmemory_address_simpleindirect : LPARENTESIS REGISTER RPARENTESISmemory_address_predecrement : MINUS LPARENTESIS REGISTER RPARENTESISmemory_address_postincrement : LPARENTESIS OFFSET REGISTER PLUSmemory_address_displacementindirect : OFFSET LPARENTESIS REGISTER RPARENTESISmemory_address_indexindirect : OFFSET LPARENTESIS REGISTER OFFSET RPARENTESISregister : REGISTER'
    
_lr_action_items = {'INSTRUCTION':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24,29,33,34,36,37,],[6,6,-1,-2,-4,-5,-10,-3,-6,-7,-12,-13,-11,-14,-16,-17,-18,-19,-20,-26,-8,-15,-21,-23,-22,-24,-25,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24,29,33,34,36,37,],[-9,0,-1,-2,-4,-5,-10,-3,-6,-7,-12,-13,-11,-14,-16,-17,-18,-19,-20,-26,-8,-15,-21,-23,-22,-24,-25,]),'SIZE':([5,6,],[12,-10,]),'REGISTER':([5,6,9,12,13,19,20,26,27,28,],[19,-10,19,-11,19,-26,25,30,31,32,]),'LPARENTESIS':([5,6,9,12,21,22,],[20,-10,20,-11,27,28,]),'MINUS':([5,6,9,12,],[21,-10,21,-11,]),'OFFSET':([5,6,9,12,20,32,],[22,-10,22,-11,26,35,]),'RPARENTESIS':([25,31,32,35,],[29,34,36,37,]),'PLUS':([30,],[33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'empty':([0,],[2,]),'statement':([0,1,],[3,7,]),'operation':([0,1,],[4,4,]),'instruction':([0,1,],[5,5,]),'addressing_mode':([5,9,],[8,23,]),'extent':([5,],[9,]),'direct_address':([5,9,],[10,10,]),'memory_address':([5,9,],[11,11,]),'register':([5,9,13,],[13,13,24,]),'memory_address_simpleindirect':([5,9,],[14,14,]),'memory_address_predecrement':([5,9,],[15,15,]),'memory_address_postincrement':([5,9,],[16,16,]),'memory_address_displacementindirect':([5,9,],[17,17,]),'memory_address_indexindirect':([5,9,],[18,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> empty','program',1,'p_program','parser.py',8),
  ('program -> statement','program',1,'p_program','parser.py',9),
  ('program -> program statement','program',2,'p_program','parser.py',10),
  ('statement -> operation','statement',1,'p_statement','parser.py',9),
  ('operation -> instruction','operation',1,'p_operation','parser.py',19),
  ('operation -> instruction addressing_mode','operation',2,'p_operation','parser.py',20),
  ('operation -> instruction extent','operation',2,'p_operation','parser.py',21),
  ('operation -> instruction extent addressing_mode','operation',3,'p_operation','parser.py',22),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',23),
  ('instruction -> INSTRUCTION','instruction',1,'p_instruction','parser.py',30),
  ('extent -> SIZE','extent',1,'p_extent','parser.py',34),
  ('addressing_mode -> direct_address','addressing_mode',1,'p_addressing_mode','parser.py',38),
  ('addressing_mode -> memory_address','addressing_mode',1,'p_addressing_mode','parser.py',39),
  ('direct_address -> register','direct_address',1,'p_direct_address_single','parser.py',46),
  ('direct_address -> register register','direct_address',2,'p_direct_address_complex','parser.py',50),
  ('memory_address -> memory_address_simpleindirect','memory_address',1,'p_memory_address','parser.py',54),
  ('memory_address -> memory_address_predecrement','memory_address',1,'p_memory_address','parser.py',55),
  ('memory_address -> memory_address_postincrement','memory_address',1,'p_memory_address','parser.py',56),
  ('memory_address -> memory_address_displacementindirect','memory_address',1,'p_memory_address','parser.py',57),
  ('memory_address -> memory_address_indexindirect','memory_address',1,'p_memory_address','parser.py',58),
  ('memory_address_simpleindirect -> LPARENTESIS REGISTER RPARENTESIS','memory_address_simpleindirect',3,'p_memory_address_simpleindirect','parser.py',61),
  ('memory_address_predecrement -> MINUS LPARENTESIS REGISTER RPARENTESIS','memory_address_predecrement',4,'p_memory_address_predecrement','parser.py',64),
  ('memory_address_postincrement -> LPARENTESIS OFFSET REGISTER PLUS','memory_address_postincrement',4,'p_memory_address_postincrement','parser.py',67),
  ('memory_address_displacementindirect -> OFFSET LPARENTESIS REGISTER RPARENTESIS','memory_address_displacementindirect',4,'p_memory_address_displacementindirect','parser.py',70),
  ('memory_address_indexindirect -> OFFSET LPARENTESIS REGISTER OFFSET RPARENTESIS','memory_address_indexindirect',5,'p_memory_address_indexindirect','parser.py',74),
  ('register -> REGISTER','register',1,'p_register','parser.py',78),
]
